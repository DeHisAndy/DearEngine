
matrix g_World; // matrix可以用float4x4替代。不加row_major的情况下，矩阵默认为列主矩阵，
matrix g_View;  // 可以在前面添加row_major表示行主矩阵
matrix g_Proj;  // 该教程往后将使用默认的列主矩阵，但需要在C++代码端预先将矩阵进行转置。
TextureCube g_TexCube;

SamplerState g_Sam;
struct VS_INPUT
{
    float3 pos : POSITION;
    float4 color: COLOR;
	float3 normal:NORMAL;
	float4 tangent:TANGENT;
	float2 uv:UV;
		
};
struct VS_OUTPUT
{
    float4 pos: SV_POSITION;
    float4 locatione:POS;
    float2 uv:MESHUV;
};




VS_OUTPUT VS(VS_INPUT input)
{
    VS_OUTPUT vOut;
    vOut.pos = mul(float4(input.pos, 1.0f), g_World);  
    vOut.pos = mul(vOut.pos, g_View);               
    vOut.pos = mul(vOut.pos, g_Proj);             
    vOut.locatione = vOut.pos;              
    vOut.pos=vOut.pos.xyww;
    vOut.uv = input.uv;               
    return vOut;
}

float4 PS(VS_OUTPUT input) : SV_TARGET
{
  float3 _BF = g_TexCube.Sample(g_Sam, normalize(input.locatione.xyz)).xyz;
return float4(1,0,0,1.0);
}

technique11 BasicTech
{
	pass P0

	{

		SetVertexShader(CompileShader(vs_5_0, VS()));

		SetGeometryShader(NULL);

		SetPixelShader(CompileShader(ps_5_0, PS()));

	}

}